name: Build

on:
  push:
    tags: [ 'v*.*.*' ]
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SWAGGER_OPENAPI_FILE_URL: https://petstore3.swagger.io/api/v3/openapi.json

jobs:
  prepare:
    runs-on: ubuntu-latest

    steps:
      # Download OpenAPI configuration file from the demo server
      - name: Download OpenAPI Conguration File
        run: curl ${{ env.SWAGGER_OPENAPI_FILE_URL }} -O

      # The OpenAPI Configuration File can generate multiple language packages.
      # This step store the artifact to be able to use it later.
      - name: Upload OpenAPI configuration file to artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: openapi
          path: openapi.json

  typescript-angular-client:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      # Get a copy of the OpenAPI Configuration File in the local directory.
      - name: Download OpenAPI configuration file from artifact
        uses: actions/download-artifact@v4.1.0
        with:
          name: openapi
          
      - name: Generate package meta
        id: package-meta
        run: |
          # Use the version tag, if not use the PR id or the destination branch.
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "registry=https://registry.npmjs.org" >> $GITHUB_OUTPUT
            echo "secret=${{ secrets.NPM_TOKEN }}" >> $GITHUB_OUTPUT
            echo "version=$(echo '${{ github.ref }}' | sed 's|refs/tags/v||')" >> $GITHUB_OUTPUT
          else
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              VERSION_SUFFIX="-pr.${{ github.event.pull_request.number }}"
            else
              VERSION_SUFFIX=-$(basename "${{ github.ref }}")
            fi
            echo "registry=https://npm.pkg.github.com" >> $GITHUB_OUTPUT
            echo "secret=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
            echo "version=0.0.0$VERSION_SUFFIX" >> $GITHUB_OUTPUT
          fi

          echo "scope=@$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "name=${GITHUB_REPOSITORY#*/}-client" >> $GITHUB_OUTPUT

      # Generate a npm package for Angular library based on the OpenAPI Configuration File.
      - name: Generate Angular Client
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            openapitools/openapi-generator-cli \
              generate \
                -i /workspace/openapi.json \
                -g typescript-angular \
                -o /workspace/ \
                --additional-properties=npmName=${{ steps.package-meta.outputs.scope }}/${{ steps.package-meta.outputs.name }},npmVersion=${{ steps.package-meta.outputs.version }}

      # Setup the requirement for npm package
      - name: Set up Node.js
        uses: actions/setup-node@v4.0.1
        with:
          node-version: 18
          registry-url: ${{ steps.package-meta.outputs.registry }}
          scope: ${{ steps.package-meta.outputs.scope }}

      # Add information to the package configuration.
      - name: Configure package
        run: |
          jq '.repository = {"type": "git", "url": "git+https://github.com/${{ github.repository }}.git"}' package.json > tmp.json && mv tmp.json package.json
          jq '.author = "${{ env.AUTHOR_NAME }} <${{ env.AUTHOR_EMAIL }}>"' package.json > tmp.json && mv tmp.json package.json
      - run: cat package.json

      # Install requirement and build the package.
      - name: Build the package
        run: npm install
      - run: npm run build

      # npm cannot remove packages, but in GitHub package registry it's possible.
      # So, let's remove the previous package version and replace it with a new build.
      - name: Get the previous package id for the same package version
        if: ${{ !(startsWith(github.ref, 'refs/tags/v')) }}
        id: version-id
        env:
          PACKAGE_NAME: ${{ steps.package-meta.outputs.name }}
          PACKAGE_VERSION: ${{ steps.package-meta.outputs.version }}
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
              org: context.repo.owner,
              package_name: process.env.PACKAGE_NAME,
              package_type: 'npm'
            });
            const version = response.data.find(v => v.name === process.env.PACKAGE_VERSION);
            if (version && version.id) {
              return version.id;
            } else {
              console.error('Version not found');
              return 0;
            }

      # Remove previous push of that version
      - name: Delete package
        if: ${{ !(startsWith(github.ref, 'refs/tags/v')) && steps.version-id.outputs.result != '0' }}
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ steps.package-meta.outputs.name }}
          package-type: 'npm'
          package-version-ids: ${{ steps.version-id.outputs.result }}

      # Publish the package.
      # If it's from a git tag, the package is published to npmjs.com and 
      # the subversion name set as tag.
      # If it's from a PR, the package is published to github and no tag is set.
      # If none above, the package is published to github and the latest tag is set.
      - name: Publish the package
        run: |
          # If git tag
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            TAG=$(echo '${{ github.ref }}' | sed -n 's/.*-\(.*\)\..*/\1/')
            if [[ -z "$TAG" ]]; then
              TAG='latest'
            fi
            npm publish ./dist --access public --tag $TAG

          # If Pull Request
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            npm publish ./dist --access public --no-tag --verbose
          
          # If a push
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "main" ]]; then
            npm publish ./dist --access public --tag latest

          # Whatever else
          else
            npm publish ./dist --access public --tag $(basename "${{ github.ref }}")
          fi

        env:
          NODE_AUTH_TOKEN: ${{ steps.package-meta.outputs.secret }}

  clean-up:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: typescript-angular-client
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Delete Versions of Packages for Closed PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOW_TOKEN }}
          script: |
            const org = context.repo.owner;
            const repo = context.repo.repo;

            const packageTypes = ['container', 'npm', 'maven', 'rubygems', 'docker', 'nuget'];

            async function safeApiCall(apiPromise, description) {
              try {
                const response = await apiPromise;
                console.log(`Success: ${description}`);
                return response;
              } catch (error) {
                console.error(`API Error for ${description}:`, error);
                return null;
              }
            }

            const closedPrsResponse = await safeApiCall(
              github.rest.pulls.list({
                owner: org,
                repo: repo,
                state: 'closed'
              }), 
              'Fetching closed PRs'
            );
            if (!closedPrsResponse) return;

            const closedPrNumbers = closedPrsResponse.data.map(pr => pr.number);

            for (const packageType of packageTypes) {
              console.log(`Checking package type: ${packageType}`);

              let packagesResponse;
              try {
                packagesResponse = await github.rest.packages.listPackagesForOrganization({
                  org: org,
                  package_type: packageType
                });
              } catch (error) {
                console.error(`Error fetching packages of type ${packageType}:`, error);
                continue;
              }

              for (const package of packagesResponse.data) {
                const packageName = package.name;
                console.log(`Checking package: ${packageName}`);

                const versionsResponse = await safeApiCall(
                  github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                    org: org,
                    package_type: packageType,
                    package_name: packageName
                  }),
                  `Fetching versions for package ${packageName}`
                );
                if (!versionsResponse) continue;

                for (const version of versionsResponse.data) {
                  let prNumberMatch;
                  if (packageType === 'container' || packageType === 'docker') {
                    // For container and docker, use the tag
                    const versionTags = version.metadata.container.tags;
                    for (const tag of versionTags) {
                      prNumberMatch = tag.match(/.(\d+)$/);
                      if (prNumberMatch && closedPrNumbers.includes(parseInt(prNumberMatch[1]))) {
                        break; // Break the loop if a matching PR number is found
                      }
                    }
                  } else {
                    // For maven, rubygems, nuget, use the version name
                    prNumberMatch = version.name.match(/.(\d+)$/);
                  }

                  if (prNumberMatch && closedPrNumbers.includes(parseInt(prNumberMatch[1]))) {
                    console.log(`Deleting package version ${version.id} of ${packageName} for closed PR #${prNumberMatch[1]}`);
                    await safeApiCall(
                      github.rest.packages.deletePackageVersionForOrg({
                        org: org,
                        package_type: packageType,
                        package_name: packageName,
                        package_version_id: version.id,
                      }),
                      `Deleting package version ${version.id} of ${packageName}`
                    );
                  }
                }
              }
            }
